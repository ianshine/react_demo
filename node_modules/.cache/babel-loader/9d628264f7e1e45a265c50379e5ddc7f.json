{"ast":null,"code":"import _classCallCheck from \"/Users/lilei/Documents/react/reactDemo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lilei/Documents/react/reactDemo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/lilei/Documents/react/reactDemo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lilei/Documents/react/reactDemo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/lilei/Documents/react/reactDemo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/lilei/Documents/react/reactDemo/src/Function/ReduxCode.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux'; //定义组件\n\nvar ReduxCode =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReduxCode, _Component);\n\n  function ReduxCode() {\n    _classCallCheck(this, ReduxCode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ReduxCode).apply(this, arguments));\n  }\n\n  _createClass(ReduxCode, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          text = _this$props.text,\n          onChangeText = _this$props.onChangeText,\n          onButtonClick = _this$props.onButtonClick;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        onClick: onChangeText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, \" \", text, \" \"), React.createElement(\"button\", {\n        onClick: onButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"click me\"));\n    }\n  }]);\n\n  return ReduxCode;\n}(Component); //action\n\n\nvar changeTextAction = {\n  type: 'CHANGE_TEXT'\n};\nvar buttonClickAction = {\n  type: 'BUTTON_CLICK' //reducer\n\n};\nvar initialState = {\n  text: 'Hello'\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_TEXT':\n      return {\n        text: state.text == 'Hello' ? 'world' : 'Hello'\n      };\n\n    case 'BUTTON_CLICK':\n      return {\n        text: 'Hello world'\n      };\n\n    default:\n      return initialState;\n  }\n}; //store\n\n\nvar store = createStore(reducer); //映射Redux state到组件的属性\n\nfunction mapStateToProps(state) {\n  return {\n    text: state.text\n  };\n} //映射Redux actions到组件的属性\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onButtonClick: function onButtonClick() {\n      return dispatch(buttonClickAction);\n    },\n    onChangeText: function onChangeText() {\n      return dispatch(changeTextAction);\n    }\n  };\n} //连接组件\n\n\nReduxCode = connect(mapStateToProps, mapDispatchToProps)(ReduxCode); //渲染组件\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 71\n  },\n  __self: this\n}, React.createElement(ReduxCode, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72\n  },\n  __self: this\n})), document.getElementById('root'));\nexport default ReduxCode;","map":{"version":3,"sources":["/Users/lilei/Documents/react/reactDemo/src/Function/ReduxCode.js"],"names":["React","Component","ReactDOM","createStore","Provider","connect","ReduxCode","props","text","onChangeText","onButtonClick","changeTextAction","type","buttonClickAction","initialState","reducer","state","action","store","mapStateToProps","mapDispatchToProps","dispatch","render","document","getElementById"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,aAAlC,C,CAIA;;IACMC,S;;;;;;;;;;;;;6BACO;AAAA,wBACuC,KAAKC,KAD5C;AAAA,UACEC,IADF,eACEA,IADF;AAAA,UACQC,YADR,eACQA,YADR;AAAA,UACsBC,aADtB,eACsBA,aADtB;AAEL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,OAAO,EAAED,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA6BD,IAA7B,MADJ,EAEI;AAAQ,QAAA,OAAO,EAAEE,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,CADJ;AAMH;;;;EATmBT,S,GAaxB;;;AACA,IAAMU,gBAAgB,GAAG;AACjBC,EAAAA,IAAI,EAAC;AADY,CAAzB;AAGA,IAAMC,iBAAiB,GAAG;AAClBD,EAAAA,IAAI,EAAC,cADa,CAK1B;;AAL0B,CAA1B;AAMA,IAAME,YAAY,GAAG;AACjBN,EAAAA,IAAI,EAAE;AADW,CAArB;;AAGA,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAC9C,UAAQA,MAAM,CAACL,IAAf;AACI,SAAK,aAAL;AACI,aAAO;AACHJ,QAAAA,IAAI,EAAEQ,KAAK,CAACR,IAAN,IAAY,OAAZ,GAAsB,OAAtB,GAA8B;AADjC,OAAP;;AAGJ,SAAK,cAAL;AACI,aAAO;AACHA,QAAAA,IAAI,EAAE;AADH,OAAP;;AAGJ;AACI,aAAOM,YAAP;AAVR;AAYH,CAbD,C,CAeA;;;AACA,IAAII,KAAK,GAAGf,WAAW,CAACY,OAAD,CAAvB,C,CAEA;;AACA,SAASI,eAAT,CAAyBH,KAAzB,EAAgC;AAC5B,SAAO;AAAER,IAAAA,IAAI,EAAEQ,KAAK,CAACR;AAAd,GAAP;AACH,C,CAED;;;AACA,SAASY,kBAAT,CAA4BC,QAA5B,EAAqC;AACjC,SAAM;AACFX,IAAAA,aAAa,EAAC;AAAA,aAAIW,QAAQ,CAACR,iBAAD,CAAZ;AAAA,KADZ;AAEFJ,IAAAA,YAAY,EAAC;AAAA,aAAIY,QAAQ,CAACV,gBAAD,CAAZ;AAAA;AAFX,GAAN;AAIH,C,CAED;;;AACAL,SAAS,GAAGD,OAAO,CAACc,eAAD,EAAkBC,kBAAlB,CAAP,CAA6Cd,SAA7C,CAAZ,C,CAEA;;AACAJ,QAAQ,CAACoB,MAAT,CACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEJ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAIIK,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJJ;AAOA,eAAelB,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\n\n \n \n//定义组件\nclass ReduxCode extends Component{\n    render() {\n        const {text, onChangeText, onButtonClick} = this.props;\n        return (\n            <div>\n                <h1 onClick={onChangeText}> {text} </h1>\n                <button onClick={onButtonClick}>click me</button>\n            </div>\n        );\n    }\n}\n \n \n//action\nconst changeTextAction = {\n        type:'CHANGE_TEXT'\n}\nconst buttonClickAction = {\n        type:'BUTTON_CLICK'\n}\n \n \n//reducer\nconst initialState = {\n    text: 'Hello'\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'CHANGE_TEXT':\n            return {\n                text: state.text=='Hello' ? 'world':'Hello'\n            }\n        case 'BUTTON_CLICK':\n            return {\n                text: 'Hello world'\n            }\n        default:\n            return initialState;\n    }\n}\n \n//store\nlet store = createStore(reducer);\n \n//映射Redux state到组件的属性\nfunction mapStateToProps(state) {\n    return { text: state.text }\n}\n \n//映射Redux actions到组件的属性\nfunction mapDispatchToProps(dispatch){\n    return{\n        onButtonClick:()=>dispatch(buttonClickAction),\n        onChangeText:()=>dispatch(changeTextAction)\n    }\n}\n \n//连接组件\nReduxCode = connect(mapStateToProps, mapDispatchToProps)(ReduxCode)\n \n//渲染组件\nReactDOM.render(\n    <Provider store={store}>\n        <ReduxCode />\n    </Provider>,\n    document.getElementById('root')\n)\n\nexport default ReduxCode;\n"]},"metadata":{},"sourceType":"module"}