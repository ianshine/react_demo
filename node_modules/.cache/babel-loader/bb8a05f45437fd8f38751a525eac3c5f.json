{"ast":null,"code":"import _classCallCheck from \"/Users/ian/Documents/react/react_demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ian/Documents/react/react_demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ian/Documents/react/react_demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ian/Documents/react/react_demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ian/Documents/react/react_demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ian/Documents/react/react_demo/src/ReduxTest/ReduxApp.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux'; // 1 点击按钮 \n// 2 触发PayDecrease()方法 \n// 3 该方法派发相应action \n// 4 reducer根据action的type响应得到新的state \n// 5 通过{this.props.tiger}拿到新的state 渲染到页面\n// 所有的action reducer store Provider connect等等都写在了一个页面\n// class App extends Component {\n//   render() {\n//     const { PayIncrease, PayDecrease } = this.props;\n//     return (\n//         <div className=\"App\">\n//             <div className=\"App\">\n//                 <h2>当月工资为{this.props.tiger}</h2>\n//                 <button onClick={PayIncrease}>升职加薪</button>\n//                 <button onClick={PayDecrease}>迟到罚款</button>\n//             </div>\n//         </div>\n//     );\n// }\n// }\n// const tiger = 10000\n// //这是action\n// const increase = {\n//     type: '涨工资'\n// }\n// const decrease = {\n//     type: '扣工资'\n// }\n// //这是reducer\n// const reducer = (state = tiger, action) => {\n//     switch (action.type) {\n//         case '涨工资':\n//             return state += 100;\n//         case '扣工资':\n//             return state -= 100;\n//         default:\n//             return state;\n//     }\n// }\n// //创建store\n// const store = createStore(reducer);\n// //需要渲染什么数据\n// function mapStateToProps(state) {\n//     return {\n//         tiger: state\n//     }\n// }\n// //需要触发什么行为\n// function mapDispatchToProps(dispatch) {\n//     return {\n//         PayIncrease: () => dispatch({ type: '涨工资' }),\n//         PayDecrease: () => dispatch({ type: '扣工资' })\n//     }\n// }\n// //连接组件\n// App = connect(mapStateToProps, mapDispatchToProps)(App)\n// ReactDOM.render(\n//   <Provider store={store}>\n//       <App />\n//   </Provider>,\n//   document.getElementById('root')\n// )\n\nvar ReduxApp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReduxApp, _Component);\n\n  function ReduxApp() {\n    _classCallCheck(this, ReduxApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ReduxApp).apply(this, arguments));\n  }\n\n  _createClass(ReduxApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          PayIncrease = _this$props.PayIncrease,\n          PayDecrease = _this$props.PayDecrease;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"\\u5F53\\u6708\\u5DE5\\u8D44\\u4E3A\", this.props.tiger), React.createElement(\"button\", {\n        onClick: PayIncrease,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"\\u5347\\u804C\\u52A0\\u85AA\"), React.createElement(\"button\", {\n        onClick: PayDecrease,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"\\u8FDF\\u5230\\u7F5A\\u6B3E\"));\n    }\n  }]);\n\n  return ReduxApp;\n}(Component); //需要渲染什么数据\n\n\nfunction mapStateToProps(state) {\n  return {\n    tiger: state\n  };\n} //需要触发什么行为\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    PayIncrease: function PayIncrease() {\n      return dispatch({\n        type: '涨工资'\n      });\n    },\n    PayDecrease: function PayDecrease() {\n      return dispatch({\n        type: '扣工资'\n      });\n    }\n  };\n} //此处一定要注意： 导出的不是APP组件，而是connect后的APP组件\n\n\nexport default ReduxApp = connect(mapStateToProps, mapDispatchToProps)(ReduxApp);","map":{"version":3,"sources":["/Users/ian/Documents/react/react_demo/src/ReduxTest/ReduxApp.js"],"names":["React","Component","ReactDOM","createStore","Provider","connect","ReduxApp","console","log","props","PayIncrease","PayDecrease","tiger","mapStateToProps","state","mapDispatchToProps","dispatch","type"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,aAAlC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;IAGMC,Q;;;;;;;;;;;;;wCAEgB;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACD;;;6BACQ;AAAA,wBAC8B,KAAKA,KADnC;AAAA,UACCC,WADD,eACCA,WADD;AAAA,UACcC,WADd,eACcA,WADd;AAEP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAU,KAAKF,KAAL,CAAWG,KAArB,CADF,EAEE;AAAQ,QAAA,OAAO,EAAEF,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAFF,EAGE;AAAQ,QAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAHF,CADF;AAOD;;;;EAdoBV,S,GAgBvB;;;AACA,SAASY,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLF,IAAAA,KAAK,EAAEE;AADF,GAAP;AAGD,C,CACD;;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLN,IAAAA,WAAW,EAAE;AAAA,aAAMM,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAd;AAAA,KADR;AAELN,IAAAA,WAAW,EAAE;AAAA,aAAMK,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAd;AAAA;AAFR,GAAP;AAID,C,CAED;;;AACA,eAAeX,QAAQ,GAAGD,OAAO,CAACQ,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CT,QAA7C,CAA1B","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\n\n// 1 点击按钮 \n// 2 触发PayDecrease()方法 \n// 3 该方法派发相应action \n// 4 reducer根据action的type响应得到新的state \n// 5 通过{this.props.tiger}拿到新的state 渲染到页面\n// 所有的action reducer store Provider connect等等都写在了一个页面\n\n// class App extends Component {\n//   render() {\n//     const { PayIncrease, PayDecrease } = this.props;\n//     return (\n//         <div className=\"App\">\n//             <div className=\"App\">\n//                 <h2>当月工资为{this.props.tiger}</h2>\n//                 <button onClick={PayIncrease}>升职加薪</button>\n//                 <button onClick={PayDecrease}>迟到罚款</button>\n//             </div>\n//         </div>\n//     );\n// }\n// }\n\n// const tiger = 10000\n\n// //这是action\n// const increase = {\n//     type: '涨工资'\n// }\n// const decrease = {\n//     type: '扣工资'\n// }\n// //这是reducer\n// const reducer = (state = tiger, action) => {\n//     switch (action.type) {\n//         case '涨工资':\n//             return state += 100;\n//         case '扣工资':\n//             return state -= 100;\n//         default:\n//             return state;\n//     }\n// }\n\n// //创建store\n// const store = createStore(reducer);\n\n// //需要渲染什么数据\n// function mapStateToProps(state) {\n//     return {\n//         tiger: state\n//     }\n// }\n// //需要触发什么行为\n// function mapDispatchToProps(dispatch) {\n//     return {\n//         PayIncrease: () => dispatch({ type: '涨工资' }),\n//         PayDecrease: () => dispatch({ type: '扣工资' })\n//     }\n// }\n\n// //连接组件\n// App = connect(mapStateToProps, mapDispatchToProps)(App)\n\n// ReactDOM.render(\n//   <Provider store={store}>\n//       <App />\n//   </Provider>,\n//   document.getElementById('root')\n// )\n\n\nclass ReduxApp extends Component {\n\n  componentDidMount() {\n    console.log(this.props)\n  } \n  render() {\n    const { PayIncrease, PayDecrease } = this.props;\n    return (\n      <div className=\"App\">\n        <h2>当月工资为{this.props.tiger}</h2>\n        <button onClick={PayIncrease}>升职加薪</button>\n        <button onClick={PayDecrease}>迟到罚款</button>\n      </div>\n    );\n  }\n}\n//需要渲染什么数据\nfunction mapStateToProps(state) {\n  return {\n    tiger: state\n  }\n}\n//需要触发什么行为\nfunction mapDispatchToProps(dispatch) {\n  return {\n    PayIncrease: () => dispatch({ type: '涨工资' }),\n    PayDecrease: () => dispatch({ type: '扣工资' })\n  }\n}\n\n//此处一定要注意： 导出的不是APP组件，而是connect后的APP组件\nexport default ReduxApp = connect(mapStateToProps, mapDispatchToProps)(ReduxApp)\n\n\n"]},"metadata":{},"sourceType":"module"}